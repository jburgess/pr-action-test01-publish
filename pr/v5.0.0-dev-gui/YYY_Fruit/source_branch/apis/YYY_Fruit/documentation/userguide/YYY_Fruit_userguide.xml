<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>XXX_FRUIT Test API</title>
<date>2022-12-07</date>
</info>
<chapter xml:id="_notice">
<title>NOTICE</title>
<simpara>Copyright © TM Forum 2022. All Rights Reserved.</simpara>
<simpara>This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published, and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this section are included on all such copies and derivative works. However, this document itself may not be modified in any way, including by removing the copyright notice or references to TM FORUM, except as needed for the purpose of developing any document or deliverable produced by a TM FORUM Collaboration Project Team (in which case the rules applicable to copyrights, as set forth in the <link xl:href="http://www.tmforum.org/IPRPolicy/11525/home.html">TM FORUM IPR Policy</link>, must be followed) or as required to translate it into languages other than English.</simpara>
<simpara>The limited permissions granted above are perpetual and will not be revoked by TM FORUM or its successors or assigns.</simpara>
<simpara>This document and the information contained herein is provided on an "AS IS" basis and TM FORUM DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.</simpara>
<simpara>Direct inquiries to the TM Forum office:</simpara>
<simpara>4 Century Drive, Suite 100<?asciidoc-br?>
Parsippany, NJ 07054, USA<?asciidoc-br?>
Tel No. +1 973 944 5100<?asciidoc-br?>
Fax No. +1 973 988 7196</simpara>
<simpara>TM Forum Web Page: <link xl:href="http://www.tmforum.org/">www.tmforum.org</link></simpara>

</chapter>
<chapter xml:id="_introduction">
<title>Introduction</title>
<simpara>The following document is the user guide of the REST API for Any management. It includes the model definition as well as all available operations.</simpara>
</chapter>
<chapter xml:id="_sample_use_cases">
<title>Sample Use Cases</title>
<simpara>Reader will find example of use cases using Usage API in “Open Digital Business Scenarios and Use Cases” document.</simpara>
</chapter>
<chapter xml:id="_support_of_polymorphism_and_extension_patterns">
<title>Support of polymorphism and extension patterns</title>
<simpara>Support of polymorphic collections and types and schema based extension is provided by means of a list of generic meta-attributes that we describe below. Polymorphism in collections occurs when entities inherit from base entities, for instance a BillingAccount and SettlementAccount inheriting properties from the abstract Account entity.</simpara>
<simpara>Generic support of polymorphism and pattern extensions is described in the TMF API Guidelines, Part 2 (TMF630).</simpara>
<simpara>The @type attribute provides a way to represent the actual class type of an entity. For example, within a list of Account instances some may be instances of BillingAccount where other could be instances of SettlementAccount. The @type gives this information. All resources and sub-resources of this API have a @type attributes that can be provided when this is useful.</simpara>
<simpara>The @referredType can be used within reference entities (like for instance an AccountRef object) to explicitly denote the actual entity type of the referred class. Notice that in reference entities the @type, when used, denotes the class type of the reference itself, such as BillingAccountRef or SettlementAccountRef, and not the class type of the referred object. However since reference classes are rarely sub-classed, @type is generally not useful in reference objects.</simpara>
<simpara>The @schemaLocation property can be used in resources to allow specifying user-defined properties of an Entity or to specify the expected characteristics of an entity.</simpara>
<simpara>The @baseType attribute gives a way to provide explicitly the base of class of a given resource that has been extended.</simpara>
</chapter>
<chapter xml:id="_resource_model">
<title>RESOURCE MODEL</title>
<section xml:id="_managed_entity_and_task_resource_models">
<title>Managed Entity and Task Resource Models</title>
<section xml:id="_fruit_resource">
<title>Fruit resource</title>
<simpara>A JSON Schema I.</simpara>
<simpara><emphasis role="strong">Resource model</emphasis></simpara>
<figure xreflabel="Figure {doc-part}-1">
<title>Fruit</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images//Resource_Fruit.png"/>
</imageobject>
<textobject><phrase>Resource Fruit</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis role="strong">Field descriptions</emphasis></simpara>
<simpara><emphasis role="strong">Fruit fields</emphasis></simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="35*"/>
<colspec colname="col_2" colwidth="65*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>fruitProperty</simpara></entry>
<entry align="left" valign="top"><simpara>A String. FruitProperty description.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>href</simpara></entry>
<entry align="left" valign="top"><simpara>A String. Hyperlink reference.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>id</simpara></entry>
<entry align="left" valign="top"><simpara>A String. Unique identifier.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>newFruitProperty1</simpara></entry>
<entry align="left" valign="top"><simpara>A String. New FruitProperty description.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="_notification_resource_models">
<title>Notification Resource Models</title>
<simpara>0 notifications are defined for this API.</simpara>
<simpara>Notifications related to Fruit:</simpara>
<simpara>The notification structure for all notifications in this API follow the pattern depicted by the figure below.
A notification event resource (depicted by "SpecificEvent" placeholder) is a sub class of a generic Event structure containing at least an id of the event occurrence (eventId), an event timestamp (eventTime), and the name of the resource (eventType).
This notification structure owns an event payload structure ("SpecificEventPayload" placeholder) linked to the resource concerned by the notification using the resource name as access field ("resourceName" placeholder).</simpara>
<informalfigure role="text-center">
<mediaobject>
<imageobject>
<imagedata fileref="./images//NotificationsPattern.png"/>
</imageobject>
<textobject><phrase>NotificationsPattern</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara role="text-center">Figure 1 - Notification Pattern</simpara>
</section>
</chapter>
<chapter xml:id="_api_operations" role="text-left">
<title>API OPERATIONS</title>
<simpara>Remember the following Uniform Contract:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Operation on Entities</entry>
<entry align="left" valign="top">Uniform API Operation</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Query Entities</simpara></entry>
<entry align="left" valign="top"><simpara>GET Resource</simpara></entry>
<entry align="left" valign="top"><simpara>GET must be used to retrieve a
representation of a resource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Create Entity</simpara></entry>
<entry align="left" valign="top"><simpara>POST Resource</simpara></entry>
<entry align="left" valign="top"><simpara>POST must be used to create a new
resource</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Partial Update of an Entity</simpara></entry>
<entry align="left" valign="top"><simpara>PATCH Resource</simpara></entry>
<entry align="left" valign="top"><simpara>PATCH must be used to
partially update a resource</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Remove an Entity</simpara></entry>
<entry align="left" valign="top"><simpara>DELETE Resource</simpara></entry>
<entry align="left" valign="top"><simpara>DELETE must be used to remove a
resource</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Execute an Action on an Entity</simpara></entry>
<entry align="left" valign="top"><simpara>POST on TASK Resource</simpara></entry>
<entry align="left" valign="top"><simpara>POST must be
used to execute Task Resources</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Other Request Methods</simpara></entry>
<entry align="left" valign="top"><simpara>POST on TASK Resource</simpara></entry>
<entry align="left" valign="top"><simpara>GET and POST must not be
used to tunnel other request methods.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Filtering and attribute selection rules are described in the TMF REST
Design Guidelines.</simpara>
<simpara>Notifications are also described in a subsequent section.</simpara>
<section xml:id="_operations_on_fruit">
<title>Operations on Fruit</title>
<section xml:id="_retrieves_a_fruit_by_id">
<title>Retrieves a Fruit by ID</title>
<simpara><literal><emphasis role="strong">GET /fruit/{id}?fields&#61;&#8230;&#8203;&amp;{filtering}</emphasis></literal></simpara>
<simpara><emphasis role="strong">Description</emphasis></simpara>
<simpara>This operation retrieves a Fruit entity.
Attribute selection is enabled for all first level attributes.
Filtering may be available depending on the compliance level supported by an implementation.</simpara>
</section>
<section xml:id="_list_or_find_fruit_objects">
<title>List or find Fruit objects</title>
<simpara><literal><emphasis role="strong">GET /fruit</emphasis></literal></simpara>
<simpara><emphasis role="strong">Description</emphasis></simpara>
<simpara>This operation list Fruit entities.
Attribute selection is enabled for all first level attributes.
Filtering may be available depending on the compliance level supported by an implementation.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_api_notifications">
<title>API NOTIFICATIONS</title>
<simpara>For every single of operation on the entities use the following
templates and provide sample REST notification POST calls.</simpara>
<simpara>It is assumed that the Pub/Sub uses the Register and UnRegister
mechanisms described in the REST Guidelines reproduced below.</simpara>
<section xml:id="_register_listener">
<title>Register listener</title>
<simpara><emphasis role="strong">POST /hub</emphasis></simpara>
<simpara><emphasis role="strong">Description</emphasis></simpara>
<simpara>Sets the communication endpoint address the service instance must use to
deliver information about its health state, execution state, failures
and metrics. Subsequent POST calls will be rejected by the service if it
does not support multiple listeners. In this case DELETE /api/hub/{id}
must be called before an endpoint can be created again.</simpara>
<simpara><emphasis role="strong">Behavior</emphasis></simpara>
<simpara>Returns HTTP/1.1 status code 204 if the request was successful.</simpara>
<simpara>Returns HTTP/1.1 status code 409 if request is not successful.</simpara>
<simpara><emphasis role="strong">Usage Samples</emphasis></simpara>
<simpara>Here&#8217;s an example of a request for registering a listener.</simpara>
<simpara><emphasis role="strong">Request</emphasis></simpara>
<screen>POST /api/hub

Accept: application/json

{
    "callback": "http://in.listener.com"
}</screen>
<simpara><emphasis role="strong">Response</emphasis></simpara>
<screen>201

Content-Type: application/json

Location: /api/hub/42

{
    "id":"42",
    "callback": "http://in.listener.com",
    "query":""
}</screen>
</section>
<section xml:id="_unregister_listener">
<title>Unregister listener</title>
<simpara><emphasis role="strong">DELETE /hub/{id}</emphasis></simpara>
<simpara><emphasis role="strong">Description</emphasis></simpara>
<simpara>Clears the communication endpoint address that was set by creating the
Hub..</simpara>
<simpara><emphasis role="strong">Behavior</emphasis></simpara>
<simpara>Returns HTTP/1.1 status code 204 if the request was successful.</simpara>
<simpara>Returns HTTP/1.1 status code 404 if the resource is not found.</simpara>
<simpara><emphasis role="strong">Usage Samples</emphasis></simpara>
<simpara>Here&#8217;s an example of a request for un-registering a listener.</simpara>
<simpara><emphasis role="strong">Request</emphasis></simpara>
<screen>DELETE /api/hub/42

Accept: application/json</screen>
<simpara><emphasis role="strong">Response</emphasis></simpara>
<screen>204</screen>
</section>
<section xml:id="_publish_event_to_listener">
<title>Publish Event to listener</title>
<simpara><emphasis role="strong">POST /client/listener</emphasis></simpara>
<simpara><emphasis role="strong">Description</emphasis></simpara>
<simpara>Clears the communication endpoint address that was set by creating the
Hub.</simpara>
<simpara>Provides to a registered listener the description of the event that was
raised. The /client/listener url is the callback url passed when
registering the listener.</simpara>
<simpara><emphasis role="strong">Behavior</emphasis></simpara>
<simpara>Returns HTTP/1.1 status code 201 if the service is able to set the
configuration.</simpara>
<simpara><emphasis role="strong">Usage Samples</emphasis></simpara>
<simpara>Here&#8217;s an example of a notification received by the listener. In this
example “EVENT TYPE” should be replaced by one of the notification types
supported by this API (see Notification resources Models section) and
EVENT BODY refers to the data structure of the given notification type.</simpara>
<simpara><emphasis role="strong">Request</emphasis></simpara>
<screen>POST /client/listener

Accept: application/json

{
    "event": {
        EVENT BODY
    },
    "eventType": "EVENT_TYPE"
}</screen>
<simpara><emphasis role="strong">Response</emphasis></simpara>
<screen>201</screen>
<simpara>For detailed examples on the general TM Forum notification mechanism,
see the TMF REST Design Guidelines.</simpara>
</section>
</chapter>
<chapter xml:id="_acknowledgements">
<title>Acknowledgements</title>
<section xml:id="_release_history">
<title>Release History</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="15*"/>
<colspec colname="col_3" colwidth="30*"/>
<colspec colname="col_4" colwidth="40*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Release Number</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Date</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Release led by:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Description</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_contributors_to_document">
<title>Contributors to Document</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</chapter>
</book>